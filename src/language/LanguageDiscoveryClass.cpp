/* Generated by re2c 0.13.5 */
/**
 * The MIT License
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @copyright  2009-2011 Roberto Perpuly
 * @license    http://www.opensource.org/licenses/mit-license.php The MIT License
 * @author     $Author$
 * @date       $Date$
 * @version    $Rev$ 
 */
#include <language/LanguageDiscoveryClass.h>
#include <language/Php53LexicalAnalyzerImpl.h>
#include <language/Php53ParserImpl.hpp>

#define DISCOVERY_BUFFER_FILL(n) { Buffer.AppendToLexeme(n); }

#define DISCOVERY_GET_CONDITION() state

#define DISCOVERY_SET_CONDITION(c) state = c

mvceditor::LanguageDiscoveryClass::LanguageDiscoveryClass()
	: Buffer()
	, Code() {
}

bool mvceditor::LanguageDiscoveryClass::Open(const UnicodeString& code) {
	bool ret = Buffer.OpenString(code);
	if (ret) {
		Code = code;
	}
	return ret;
}

mvceditor::LanguageDiscoveryClass::Syntax mvceditor::LanguageDiscoveryClass::at(int pos) {

	// need to reset the buffer back to the beginning of the source code
	Buffer.OpenString(Code);
	int currentPos = 0;
	
	// don't get confused: state is for keeping track of the scanner; ie if we are inside a string or
	// comment or heredoc, etc... and state is the LANGUAGE we are in.
	mvceditor::LanguageDiscoveryClass::Syntax syntax = mvceditor::LanguageDiscoveryClass::HTML;
	mvceditor::LanguageDiscoveryClass::ScannerState state = mvceditor::LanguageDiscoveryClass::STATE_HTML;
	
	// Note: the rules below are NOT the full PHP spec; they are only enough rules so that we can
	// properly tell what language we are in.  
	
discovery_start:
	if (currentPos >= pos) {
		return syntax;
	}
	currentPos += Buffer.Current - Buffer.TokenStart;
	Buffer.ResetBuffer();
	
discovery_next_char:

	{
		UChar yych;
		switch (DISCOVERY_GET_CONDITION()) {
		case STATE_HTML: goto discovery_HTML;
		case STATE_PHP_BACKTICK: goto discovery_PHP_BACKTICK;
		case STATE_PHP_DOUBLE_QUOTE_STRING: goto discovery_PHP_DOUBLE_QUOTE_STRING;
		case STATE_PHP_HEREDOC: goto discovery_PHP_HEREDOC;
		case STATE_PHP_LINE_COMMENT: goto discovery_PHP_LINE_COMMENT;
		case STATE_PHP_MULTI_LINE_COMMENT: goto discovery_PHP_MULTI_LINE_COMMENT;
		case STATE_PHP_NOWDOC: goto discovery_PHP_NOWDOC;
		case STATE_PHP_SCRIPT: goto discovery_PHP_SCRIPT;
		case STATE_PHP_SINGLE_QUOTE_STRING: goto discovery_PHP_SINGLE_QUOTE_STRING;
		}
/* *********************************** */
discovery_HTML:

		if ((Buffer.Limit - Buffer.Current) < 7) DISCOVERY_BUFFER_FILL(7);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_2;
		case '\n':	goto discovery_6;
		case '\r':	goto discovery_8;
		case '<':	goto discovery_4;
		default:	goto discovery_9;
		}
discovery_2:
		++Buffer.Current;
		{ return syntax; }
discovery_4:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '?':	goto discovery_11;
		default:	goto discovery_5;
		}
discovery_5:
		{ goto discovery_start; }
discovery_6:
		++Buffer.Current;
discovery_7:
		{ Buffer.IncrementLine(); goto discovery_start; }
discovery_8:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_10;
		default:	goto discovery_7;
		}
discovery_9:
		yych = *++Buffer.Current;
		goto discovery_5;
discovery_10:
		yych = *++Buffer.Current;
		goto discovery_7;
discovery_11:
		yych = *(Buffer.Marker = ++Buffer.Current);
		switch (yych) {
		case '=':	goto discovery_15;
		case 'P':
		case 'p':	goto discovery_13;
		default:	goto discovery_12;
		}
discovery_12:
		{ syntax = PHP_SCRIPT; state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_13:
		yych = *++Buffer.Current;
		switch (yych) {
		case 'H':
		case 'h':	goto discovery_17;
		default:	goto discovery_14;
		}
discovery_14:
		Buffer.Current = Buffer.Marker;
		goto discovery_12;
discovery_15:
		++Buffer.Current;
		{ syntax = PHP_SCRIPT; state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_17:
		yych = *++Buffer.Current;
		switch (yych) {
		case 'P':
		case 'p':	goto discovery_18;
		default:	goto discovery_14;
		}
discovery_18:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\t':
		case '\v':
		case '\f':
		case ' ':	goto discovery_22;
		case '\n':	goto discovery_19;
		case '\r':	goto discovery_21;
		default:	goto discovery_14;
		}
discovery_19:
		++Buffer.Current;
discovery_20:
		{ syntax = PHP_SCRIPT; state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_21:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_19;
		default:	goto discovery_20;
		}
discovery_22:
		++Buffer.Current;
		{ syntax = PHP_SCRIPT; state = STATE_PHP_SCRIPT; goto discovery_start; }
/* *********************************** */
discovery_PHP_BACKTICK:
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_26;
		case '\n':	goto discovery_30;
		case '\r':	goto discovery_32;
		case '`':	goto discovery_28;
		default:	goto discovery_33;
		}
discovery_26:
		++Buffer.Current;
		{ return syntax; }
discovery_28:
		++Buffer.Current;
		{ state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_30:
		++Buffer.Current;
discovery_31:
		{ Buffer.IncrementLine(); goto discovery_start; }
discovery_32:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_35;
		default:	goto discovery_31;
		}
discovery_33:
		++Buffer.Current;
		{ goto discovery_start; }
discovery_35:
		++Buffer.Current;
		yych = *Buffer.Current;
		goto discovery_31;
/* *********************************** */
discovery_PHP_DOUBLE_QUOTE_STRING:
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_38;
		case '\n':	goto discovery_44;
		case '\r':	goto discovery_46;
		case '"':	goto discovery_42;
		case '\\':	goto discovery_40;
		default:	goto discovery_47;
		}
discovery_38:
		++Buffer.Current;
		{ return syntax; }
discovery_40:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '"':	goto discovery_51;
		case '\\':	goto discovery_49;
		default:	goto discovery_41;
		}
discovery_41:
		{ goto discovery_start; }
discovery_42:
		++Buffer.Current;
		{ state = STATE_PHP_SCRIPT; }
discovery_44:
		++Buffer.Current;
discovery_45:
		{ Buffer.IncrementLine(); goto discovery_start; }
discovery_46:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_48;
		default:	goto discovery_45;
		}
discovery_47:
		yych = *++Buffer.Current;
		goto discovery_41;
discovery_48:
		yych = *++Buffer.Current;
		goto discovery_45;
discovery_49:
		++Buffer.Current;
		{ goto discovery_start; }
discovery_51:
		++Buffer.Current;
		{ goto discovery_start; }
/* *********************************** */
discovery_PHP_HEREDOC:
		if (Buffer.Limit <= Buffer.Current) DISCOVERY_BUFFER_FILL(1);
		yych = *Buffer.Current;
		if (yych >= 0x01) goto discovery_57;
		++Buffer.Current;
		{ return syntax; }
discovery_57:
		++Buffer.Current;
		{ if (mvceditor::HandleHeredoc(Buffer) == T_ERROR_UNTERMINATED_STRING)  { puts("unterminated heredoc"); return syntax ; } state = STATE_PHP_SCRIPT; goto discovery_start; }
/* *********************************** */
discovery_PHP_LINE_COMMENT:
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_61;
		case '\n':	goto discovery_63;
		case '\r':	goto discovery_65;
		case '?':	goto discovery_66;
		default:	goto discovery_68;
		}
discovery_61:
		++Buffer.Current;
		{ return syntax; }
discovery_63:
		++Buffer.Current;
discovery_64:
		{ Buffer.IncrementLine(); state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_65:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_71;
		default:	goto discovery_64;
		}
discovery_66:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '>':	goto discovery_69;
		default:	goto discovery_67;
		}
discovery_67:
		{ goto discovery_start; }
discovery_68:
		yych = *++Buffer.Current;
		goto discovery_67;
discovery_69:
		++Buffer.Current;
		{ syntax = HTML; state = STATE_HTML; goto discovery_start; }
discovery_71:
		++Buffer.Current;
		yych = *Buffer.Current;
		goto discovery_64;
/* *********************************** */
discovery_PHP_MULTI_LINE_COMMENT:
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_74;
		case '\n':	goto discovery_76;
		case '\r':	goto discovery_78;
		case '*':	goto discovery_79;
		default:	goto discovery_81;
		}
discovery_74:
		++Buffer.Current;
		{ return syntax; }
discovery_76:
		++Buffer.Current;
discovery_77:
		{ Buffer.IncrementLine(); goto discovery_start; }
discovery_78:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_84;
		default:	goto discovery_77;
		}
discovery_79:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '/':	goto discovery_82;
		default:	goto discovery_80;
		}
discovery_80:
		{ goto discovery_start; }
discovery_81:
		yych = *++Buffer.Current;
		goto discovery_80;
discovery_82:
		++Buffer.Current;
		{  state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_84:
		++Buffer.Current;
		yych = *Buffer.Current;
		goto discovery_77;
/* *********************************** */
discovery_PHP_NOWDOC:
		if (Buffer.Limit <= Buffer.Current) DISCOVERY_BUFFER_FILL(1);
		yych = *Buffer.Current;
		if (yych >= 0x01) goto discovery_89;
		++Buffer.Current;
		{ return syntax; }
discovery_89:
		++Buffer.Current;
		{ if (mvceditor::HandleNowdoc(Buffer) == T_ERROR_UNTERMINATED_STRING) { puts("unterminated nowdoc"); return syntax; } state = STATE_PHP_SCRIPT; goto discovery_start; }
/* *********************************** */
discovery_PHP_SCRIPT:
		if ((Buffer.Limit - Buffer.Current) < 3) DISCOVERY_BUFFER_FILL(3);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_93;
		case '"':	goto discovery_102;
		case '#':	goto discovery_98;
		case '\'':	goto discovery_100;
		case '/':	goto discovery_97;
		case '<':	goto discovery_106;
		case '?':	goto discovery_95;
		case '`':	goto discovery_104;
		default:	goto discovery_107;
		}
discovery_93:
		++Buffer.Current;
		{ return syntax; }
discovery_95:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '>':	goto discovery_132;
		default:	goto discovery_96;
		}
discovery_96:
		{ goto discovery_start; }
discovery_97:
		yych = *++Buffer.Current;
		switch (yych) {
		case '*':	goto discovery_128;
		case '/':	goto discovery_130;
		default:	goto discovery_96;
		}
discovery_98:
		++Buffer.Current;
		{ state = STATE_PHP_LINE_COMMENT; goto discovery_start;}
discovery_100:
		++Buffer.Current;
		{ state = STATE_PHP_SINGLE_QUOTE_STRING; goto discovery_start;}
discovery_102:
		++Buffer.Current;
		{ state = STATE_PHP_DOUBLE_QUOTE_STRING; goto discovery_start;}
discovery_104:
		++Buffer.Current;
		{ state = STATE_PHP_BACKTICK; goto discovery_start;}
discovery_106:
		yych = *(Buffer.Marker = ++Buffer.Current);
		switch (yych) {
		case '<':	goto discovery_108;
		default:	goto discovery_96;
		}
discovery_107:
		yych = *++Buffer.Current;
		goto discovery_96;
discovery_108:
		yych = *++Buffer.Current;
		switch (yych) {
		case '<':	goto discovery_110;
		default:	goto discovery_109;
		}
discovery_109:
		Buffer.Current = Buffer.Marker;
		goto discovery_96;
discovery_110:
		++Buffer.Current;
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case '\n':
		case '\r':
		case 0x0E:
		case 0x0F:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		case 0x19:
		case 0x1A:
		case 0x1B:
		case 0x1C:
		case 0x1D:
		case 0x1E:
		case 0x1F:
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '(':
		case ')':
		case '*':
		case '+':
		case ',':
		case '-':
		case '.':
		case '/':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case ':':
		case ';':
		case '<':
		case '=':
		case '>':
		case '?':
		case '@':
		case '[':
		case '\\':
		case ']':
		case '^':
		case '`':
		case '{':
		case '|':
		case '}':
		case '~':	goto discovery_109;
		case '\t':
		case '\v':
		case '\f':
		case ' ':	goto discovery_110;
		case '"':	goto discovery_113;
		case '\'':	goto discovery_112;
		default:	goto discovery_114;
		}
discovery_112:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\'':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto discovery_109;
		default:	goto discovery_123;
		}
discovery_113:
		yych = *++Buffer.Current;
		switch (yych) {
		case '"':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	goto discovery_109;
		default:	goto discovery_120;
		}
discovery_114:
		++Buffer.Current;
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case '\t':
		case '\v':
		case '\f':
		case 0x0E:
		case 0x0F:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		case 0x19:
		case 0x1A:
		case 0x1B:
		case 0x1C:
		case 0x1D:
		case 0x1E:
		case 0x1F:
		case ' ':
		case '!':
		case '"':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '(':
		case ')':
		case '*':
		case '+':
		case ',':
		case '-':
		case '.':
		case '/':
		case ':':
		case ';':
		case '<':
		case '=':
		case '>':
		case '?':
		case '@':
		case '[':
		case '\\':
		case ']':
		case '^':
		case '`':
		case '{':
		case '|':
		case '}':
		case '~':	goto discovery_109;
		case '\n':	goto discovery_116;
		case '\r':	goto discovery_118;
		default:	goto discovery_114;
		}
discovery_116:
		++Buffer.Current;
discovery_117:
		{ Buffer.IncrementLine(); state = STATE_PHP_HEREDOC; goto discovery_next_char; }
discovery_118:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_116;
		default:	goto discovery_117;
		}
discovery_119:
		++Buffer.Current;
		if ((Buffer.Limit - Buffer.Current) < 3) DISCOVERY_BUFFER_FILL(3);
		yych = *Buffer.Current;
discovery_120:
		switch (yych) {
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case '\t':
		case '\n':
		case '\v':
		case '\f':
		case '\r':
		case 0x0E:
		case 0x0F:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		case 0x19:
		case 0x1A:
		case 0x1B:
		case 0x1C:
		case 0x1D:
		case 0x1E:
		case 0x1F:
		case ' ':
		case '!':
		case '#':
		case '$':
		case '%':
		case '&':
		case '\'':
		case '(':
		case ')':
		case '*':
		case '+':
		case ',':
		case '-':
		case '.':
		case '/':
		case ':':
		case ';':
		case '<':
		case '=':
		case '>':
		case '?':
		case '@':
		case '[':
		case '\\':
		case ']':
		case '^':
		case '`':
		case '{':
		case '|':
		case '}':
		case '~':	goto discovery_109;
		case '"':	goto discovery_121;
		default:	goto discovery_119;
		}
discovery_121:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_116;
		case '\r':	goto discovery_118;
		default:	goto discovery_109;
		}
discovery_122:
		++Buffer.Current;
		if ((Buffer.Limit - Buffer.Current) < 3) DISCOVERY_BUFFER_FILL(3);
		yych = *Buffer.Current;
discovery_123:
		switch (yych) {
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case '\t':
		case '\n':
		case '\v':
		case '\f':
		case '\r':
		case 0x0E:
		case 0x0F:
		case 0x10:
		case 0x11:
		case 0x12:
		case 0x13:
		case 0x14:
		case 0x15:
		case 0x16:
		case 0x17:
		case 0x18:
		case 0x19:
		case 0x1A:
		case 0x1B:
		case 0x1C:
		case 0x1D:
		case 0x1E:
		case 0x1F:
		case ' ':
		case '!':
		case '"':
		case '#':
		case '$':
		case '%':
		case '&':
		case '(':
		case ')':
		case '*':
		case '+':
		case ',':
		case '-':
		case '.':
		case '/':
		case ':':
		case ';':
		case '<':
		case '=':
		case '>':
		case '?':
		case '@':
		case '[':
		case '\\':
		case ']':
		case '^':
		case '`':
		case '{':
		case '|':
		case '}':
		case '~':	goto discovery_109;
		case '\'':	goto discovery_124;
		default:	goto discovery_122;
		}
discovery_124:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_125;
		case '\r':	goto discovery_127;
		default:	goto discovery_109;
		}
discovery_125:
		++Buffer.Current;
discovery_126:
		{ Buffer.IncrementLine(); state = STATE_PHP_NOWDOC; goto discovery_next_char; }
discovery_127:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_125;
		default:	goto discovery_126;
		}
discovery_128:
		++Buffer.Current;
		{ state = STATE_PHP_MULTI_LINE_COMMENT; goto discovery_start;}
discovery_130:
		++Buffer.Current;
		{ state = STATE_PHP_LINE_COMMENT; goto discovery_start;}
discovery_132:
		++Buffer.Current;
		{ syntax = HTML; state = STATE_HTML; goto discovery_start; }
/* *********************************** */
discovery_PHP_SINGLE_QUOTE_STRING:
		if ((Buffer.Limit - Buffer.Current) < 2) DISCOVERY_BUFFER_FILL(2);
		yych = *Buffer.Current;
		switch (yych) {
		case 0x00:	goto discovery_136;
		case '\n':	goto discovery_142;
		case '\r':	goto discovery_144;
		case '\'':	goto discovery_140;
		case '\\':	goto discovery_138;
		default:	goto discovery_145;
		}
discovery_136:
		++Buffer.Current;
		{ return syntax; }
discovery_138:
		++Buffer.Current;
		switch ((yych = *Buffer.Current)) {
		case '\'':	goto discovery_149;
		case '\\':	goto discovery_147;
		default:	goto discovery_139;
		}
discovery_139:
		{ goto discovery_start; }
discovery_140:
		++Buffer.Current;
		{ state = STATE_PHP_SCRIPT; goto discovery_start; }
discovery_142:
		++Buffer.Current;
discovery_143:
		{ Buffer.IncrementLine(); goto discovery_start; }
discovery_144:
		yych = *++Buffer.Current;
		switch (yych) {
		case '\n':	goto discovery_146;
		default:	goto discovery_143;
		}
discovery_145:
		yych = *++Buffer.Current;
		goto discovery_139;
discovery_146:
		yych = *++Buffer.Current;
		goto discovery_143;
discovery_147:
		++Buffer.Current;
		{ goto discovery_start; }
discovery_149:
		++Buffer.Current;
		{ goto discovery_start; }
	}


}